from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import pandas as pd
import os
import logging
import aiofiles  
import asyncio
from keyboards import *
from aiogram.types import InlineKeyboardButton
import os
import pandas as pd
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    encoding="utf-8",
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot_log.log'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
EXCEL_FILE = 'users_data.xlsx'
BOT_TOKEN = "7753196829:AAE6G8mobolxxyA4ntnjfe4VX5VCCh9LGYI"
TOPICS_FILE = 'topics.txt'
ADMIN_CHAT_ID="857663686"
ALONE_FILE = 'alone.xlsx'

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class UserStates(StatesGroup):
    FullnameState = State()
    GroupState = State()
    TopicState = State()
    AnswerState = State()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel ---
def create_excel_file():
    """–°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    try:
        if not os.path.exists(EXCEL_FILE):
            df = pd.DataFrame(columns=["–§–ò–û", "TG_ID", "–¢–µ–º–∞", "–ì—Ä—É–ø–ø–∞"])
            df.to_excel(EXCEL_FILE, index=False)
            logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª")
        else:
            logger.info("–§–∞–π–ª —ç–∫—Å–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")

def is_user_in_excel(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    try:
        df = pd.read_excel(EXCEL_FILE)
        return str(user_id) in df['TG_ID'].astype(str).values
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def add_user_to_excel(fio, tg_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Excel."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame, –µ—Å–ª–∏ –Ω–µ—Ç
        df = pd.read_excel(EXCEL_FILE) if os.path.exists(EXCEL_FILE) else pd.DataFrame(columns=["–§–ò–û", "TG_ID", "–¢–µ–º–∞", "–ì—Ä—É–ø–ø–∞"])
        new_row = pd.DataFrame([[fio, tg_id, "", ""]], columns=["–§–ò–û", "TG_ID", "–¢–µ–º–∞", "–ì—Ä—É–ø–ø–∞"])
        df = pd.concat([df, new_row], ignore_index=True)
        df.to_excel(EXCEL_FILE, index=False)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {tg_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise e

def add_group_to_excel(user_id, group): 
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Excel —Ñ–∞–π–ª."""
    try:
        df = pd.read_excel(EXCEL_FILE)
        if user_id in df['TG_ID'].values:
            df.loc[df['TG_ID'] == user_id, '–ì—Ä—É–ø–ø–∞'] = group 
            df.to_excel(EXCEL_FILE, index=False)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ {group} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        return False


def has_user_topic(tg_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–º—É."""
    try:
        df = pd.read_excel(EXCEL_FILE)
        user_data = df[df['TG_ID'] == tg_id]
        if user_data.empty:
            return False
        return pd.notna(user_data.iloc[0]['–¢–µ–º–∞'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

async def add_topic_to_user(tg_id, topic):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        df = pd.read_excel(EXCEL_FILE)
        if not df[df['TG_ID'] == tg_id].empty:
            df.loc[df['TG_ID'] == tg_id, '–¢–µ–º–∞'] = topic
            df.to_excel(EXCEL_FILE, index=False)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {topic}")
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ remove_topic_from_file
            await remove_topic_from_file(topic)
            
            return True
        else:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: {e}")
        return False
    

async def load_topics():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º."""
    try:
        if not os.path.exists(TOPICS_FILE):
            logger.warning(f"–§–∞–π–ª —Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {TOPICS_FILE}")
            return []
        
        async with aiofiles.open(TOPICS_FILE, mode='r', encoding='utf-8') as file:
            topics = await file.readlines()
        return [topic.strip() for topic in topics if topic.strip()]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º: {e}")
        return []

async def remove_topic_from_file(topic):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        async with aiofiles.open(TOPICS_FILE, mode='r', encoding='utf-8') as file:
            topics = await file.readlines()
        
        topics = [t.strip() for t in topics if t.strip() != topic]
        
        async with aiofiles.open(TOPICS_FILE, mode='w', encoding='utf-8') as file:
            await file.write('\n'.join(topics))
        logger.info(f"–¢–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {topic}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: {e}")
        
async def set_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
    commands = [
        types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        types.BotCommand(command="/help", description="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        types.BotCommand(command="/registr", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        types.BotCommand(command="/profile", description="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand(command="/topics", description="–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É"),
        types.BotCommand(command="/answer", description="–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"),
    ]
    await bot.set_my_commands(commands)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º
topics_dict = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
- /help - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
- /registr - –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
- /topics - –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã.
- /profile - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
- /answer - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
"""
    try:
        await message.answer(welcome_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = """
‚ÑπÔ∏è –ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:

1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (/registr)
   - –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û
   - –£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –æ–±—É—á–µ–Ω–∏—è

2Ô∏è‚É£ –í—ã–±–æ—Ä —Ç–µ–º—ã (/topics)
   - –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã
   - –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É
   - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä
‚ùóÔ∏è –í–∞–∂–Ω–æ: –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ

3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è (/profile)
   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã

4Ô∏è‚É£ –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ–∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (/answer)
    - –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    - –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
"""

    try:
        await message.answer(help_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ HELP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HELP: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(commands=['registr'])
async def registration_command(message: types.Message):
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /registr –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    if is_user_in_excel(message.from_user.id):
        await message.answer("‚ùóÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    await message.answer("üë§ –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)")
    await UserStates.FullnameState.set()



@dp.message_handler(state=UserStates.FullnameState)
async def process_fullname(message: types.Message, state: FSMContext):
    fullname = message.text.strip()
    
    if len(fullname.split()) != 3:
        await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)")
        return

    try:
        add_user_to_excel(fullname, message.from_user.id)
        await message.answer("‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–ò 1-1)")
        await UserStates.GroupState.set()
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –§–ò–û: {e}")

@dp.message_handler(state=UserStates.GroupState)
async def user_group_here(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã"""
    group = message.text.strip()
    
    if len(group.split()) != 2:
        await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ü–ò 1-1'")
        return

    try:
        if add_group_to_excel(message.from_user.id, group):
            await message.answer(
                "‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: /profile\n"
                "- –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É: /topics"
            )
            await state.finish()
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await state.finish()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã")
        await state.finish()

@dp.message_handler(commands=['profile'])
async def profile_command(message: types.Message):
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /profile –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    try:
        df = pd.read_excel(EXCEL_FILE)
        user_data = df[df['TG_ID'] == message.from_user.id]
        
        if user_data.empty:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /registr –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
            
        user = user_data.iloc[0]
        profile_text = (
            "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"–§–ò–û: {user['–§–ò–û']}\n"
            f"–ì—Ä—É–ø–ø–∞: {user['–ì—Ä—É–ø–ø–∞'] if pd.notna(user['–ì—Ä—É–ø–ø–∞']) else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–¢–µ–º–∞: {user['–¢–µ–º–∞'] if pd.notna(user['–¢–µ–º–∞']) else '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}"
        )
        
        await message.answer(profile_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è")

@dp.message_handler(commands=['topics'])
async def topics_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã."""
    try:
        if not is_user_in_excel(message.from_user.id):
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /registr")
            return

        if has_user_topic(message.from_user.id):
            await message.answer("‚ùå –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É. –ò–∑–º–µ–Ω–∏—Ç—å –µ—ë –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            return

        topics = await load_topics()
        if not topics:
            await message.answer("üì¢ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º.")
            return

        await UserStates.TopicState.set()
        await state.update_data(topics=topics)
        await show_topics_page(message, topics, 1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ topics: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º.")
        await state.finish()

async def show_topics_page(message: types.Message, topics: list, page: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–º–∞–º–∏."""
    items_per_page = 10
    total_pages = (len(topics) + items_per_page - 1) // items_per_page
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(topics))

    topics_text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n\n"
    for i in range(start_idx, end_idx):
        topics_text += f"{i + 1}. {topics[i]}\n"

    keyboard = InlineKeyboardMarkup(row_width=5)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"page_{page-1}"))
    nav_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="current_page"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"page_{page+1}"))
    keyboard.row(*nav_buttons)

    # –ö–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–º
    buttons = []
    for i in range(start_idx, end_idx):
        topic_number = str(i + 1)
        buttons.append(InlineKeyboardButton(topic_number, callback_data=f"select_topic_{topic_number}"))
    keyboard.add(*buttons)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))

    await message.answer(topics_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('page_') or c.data.startswith('select_topic_') or c.data == "back_to_main", state=UserStates.TopicState)
async def process_topics_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ–º."""
    try:
        data = await state.get_data()
        topics = data.get('topics', [])

        if callback.data == "back_to_main":
            await state.finish()
            await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            return

        if callback.data.startswith('page_'):
            page = int(callback.data.split('_')[1])
            await callback.message.edit_text("–ó–∞–≥—Ä—É–∑–∫–∞...")
            await show_topics_page(callback.message, topics, page)
            await callback.answer()
            return

        if callback.data.startswith('select_topic_'):
            topic_number = int(callback.data.split('_')[2])
            topic_index = topic_number - 1

            if 0 <= topic_index < len(topics):
                selected_topic = topics[topic_index]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ –∫–æ–º–∞–Ω–¥–µ
                team_keyboard = InlineKeyboardMarkup()
                team_keyboard.add(
                    InlineKeyboardButton("–î–∞", callback_data=f"has_team_{topic_index}"),
                    InlineKeyboardButton("–ù–µ—Ç", callback_data=f"no_team_{topic_index}")
                )

                await callback.message.edit_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É:\n{selected_topic}\n\n–£ –≤–∞—Å –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞?",
                    reply_markup=team_keyboard
                )
            else:
                await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–º—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback —Ç–µ–º—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.callback_query_handler(lambda c: c.data.startswith(('has_team_', 'no_team_')), state=UserStates.TopicState)
async def process_team_response(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        data = await state.get_data()
        topics = data.get('topics', [])
        topic_index = int(callback.data.split('_')[2])
        selected_topic = topics[topic_index]
        user_id = callback.from_user.id
        
        user_info = get_user_info(user_id)  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if not user_info:
            await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return

        if callback.data.startswith('has_team_'):
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ - –ø—Ä–æ—Å—Ç–æ –±—Ä–æ–Ω–∏—Ä—É–µ–º —Ç–µ–º—É
            if await add_topic_to_user(user_id, selected_topic):
                    await callback.message.edit_text(
                        f"‚úÖ –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n"
                        f"üìå –í–∞—à–∞ —Ç–µ–º–∞: {selected_topic}"
                    )
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–º—ã")
        
        else:  # no_team
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª alone.xlsx –∏ –±—Ä–æ–Ω–∏—Ä—É–µ–º —Ç–µ–º—É
            user_data = {
                'tg_id': user_id,
                'full_name': user_info['full_name'],
                'group': user_info['group'],
                'selected_topic': selected_topic
            }
            
            if add_to_alone_file(user_data):
                if add_topic_to_user(user_id, selected_topic):
                    await callback.message.edit_text(
                        f"‚úÖ –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n"
                        f"üìå –í–∞—à–∞ —Ç–µ–º–∞: {selected_topic}\n"
                        f"‚ÑπÔ∏è –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    await bot.send_message(
                        ADMIN_CHAT_ID,
                        f"üÜï –ù–æ–≤—ã–π –æ–¥–∏–Ω–æ—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!\n"
                        f"TG ID: {user_id}\n"
                        f"–§–ò–û: {user_info['full_name']}\n"
                        f"–ì—Ä—É–ø–ø–∞: {user_info['group']}\n"
                        f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞: {selected_topic}"
                    )
                else:
                    await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–º—ã")
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å–ø–∏—Å–æ–∫ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

        await state.finish()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ –∫–æ–º–∞–Ω–¥–µ: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await state.finish()

def add_to_alone_file(user_data: dict) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–∏–Ω–æ—á–Ω–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ –≤ —Ñ–∞–π–ª alone.xlsx
    """
    try:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        if not os.path.exists('alone.xlsx'):
            df = pd.DataFrame(columns=['–§–ò–û', 'TG_ID', '–ì—Ä—É–ø–ø–∞', '–¢–µ–º–∞'])
            df.to_excel('alone.xlsx', index=False)

        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        df = pd.read_excel('alone.xlsx')

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
        new_row = pd.DataFrame({
            '–§–ò–û': [user_data['full_name']],
            'TG_ID': [user_data['tg_id']],  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ TG_ID
            '–ì—Ä—É–ø–ø–∞': [user_data['group']],
            '–¢–µ–º–∞': [user_data['selected_topic']]
        })

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        df = pd.concat([df, new_row], ignore_index=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        df.to_excel('alone.xlsx', index=False)
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ alone.xlsx: {e}")
        return False
def get_user_info(user_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        df = pd.read_excel(EXCEL_FILE)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É EXCEL_FILE
        user_row = df[df['TG_ID'] == user_id].iloc[0]
        
        return {
            'full_name': user_row['–§–ò–û'],
            'group': user_row['–ì—Ä—É–ø–ø–∞']
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return None

def add_to_alone_file(user_data: dict) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–∏–Ω–æ—á–Ω–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ –≤ —Ñ–∞–π–ª alone.xlsx
    """
    try:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        if not os.path.exists('alone.xlsx'):
            df = pd.DataFrame(columns=['–§–ò–û', 'TG_ID', '–ì—Ä—É–ø–ø–∞', '–¢–µ–º–∞'])
            df.to_excel('alone.xlsx', index=False)

        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        df = pd.read_excel('alone.xlsx')

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
        new_row = pd.DataFrame({
            '–§–ò–û': [user_data['full_name']],
            'TG_ID': [user_data['tg_id']], 
            '–ì—Ä—É–ø–ø–∞': [user_data['group']],
            '–¢–µ–º–∞': [user_data['selected_topic']]
        })


        df = pd.concat([df, new_row], ignore_index=True)


        df.to_excel('alone.xlsx', index=False)
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ alone.xlsx: {e}")
        return False


@dp.message_handler(commands=['answer'])
async def answer_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤."""
    try:
        questions = await read_questions_from_file('answer.txt')
        if not questions:
            await message.answer("üì¢ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.")
            return

        await UserStates.AnswerState.set()
        await state.update_data(questions=questions)
        await show_questions_page(message, questions, 1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ answer: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        await state.finish()

async def show_questions_page(message: types.Message, questions: list, page: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏."""
    items_per_page = 3
    total_pages = (len(questions) + items_per_page - 1) // items_per_page
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(questions))

    questions_text = "üìö –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    questions_text += "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É @Nothingness105\n\n"
    
    for i in range(start_idx, end_idx):
        q, a = questions[i]
        questions_text += f"‚ùì –í–æ–ø—Ä–æ—Å: {q}\nüí¨ –û—Ç–≤–µ—Ç: {a}\n\n{'‚îÄ' * 30}\n\n"

    keyboard = InlineKeyboardMarkup(row_width=3)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"answer_page_{page-1}"))
    nav_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="current_page"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"answer_page_{page+1}"))
    keyboard.row(*nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_from_answers"))

    await message.answer(questions_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('answer_page_') or c.data == "back_to_main_from_answers", state=UserStates.AnswerState)
async def process_answer_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤."""
    try:
        data = await state.get_data()
        questions = data.get('questions', [])

        if callback.data == "back_to_main_from_answers":
            await state.finish()
            await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            return

        if callback.data.startswith('answer_page_'):
            page = int(callback.data.split('_')[2])
            await callback.message.edit_text("–ó–∞–≥—Ä—É–∑–∫–∞...")
            await show_questions_page(callback.message, questions, page)
            await callback.answer()
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await state.finish()

async def read_questions_from_file(file_path: str) -> list:
    """–ß–∏—Ç–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        if not os.path.exists(file_path):
            logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []

        async with aiofiles.open(file_path, 'r', encoding='utf-8') as file:
            content = await file.read()
            raw_blocks = content.split('<')

            questions = []
            for block in raw_blocks:
                block = block.strip()
                if block:
                    parts = block.split('\n', 1)
                    if len(parts) == 2:
                        question = parts[0].strip()
                        answer = parts[1].strip()
                        questions.append((question, answer))

            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
            return questions

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return []

@dp.message_handler(lambda message: message.text.startswith('/'))
async def unknown_command(message: types.Message):
    command = message.get_command(pure=True)
    if not dp.has_handler_for(message.text):
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞...\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

@dp.errors_handler()
async def errors_handler(update, exception):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {exception}")
    return True


async def on_startup(_):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    try:
        create_excel_file()  # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await set_commands(bot)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")


if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup) 
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")